from flask import jsonify
import os
from supabase import create_client
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()

# L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_KEY = os.getenv("SUPABASE_KEY")

# Ki·ªÉm tra n·∫øu thi·∫øu th√¥ng tin k·∫øt n·ªëi
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("Thi·∫øu SUPABASE_URL ho·∫∑c SUPABASE_KEY trong m√¥i tr∆∞·ªùng!")

# Kh·ªüi t·∫°o client Supabase
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# H√†m t√¨m ki·∫øm s·∫£n ph·∫©m
def searchUser(searchtxt):
    if not searchtxt:
        return jsonify({"error": "Ch∆∞a nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm."}), 400

    try:
        print(f"üîç ƒêang t√¨m ki·∫øm: {searchtxt}")  # Debug ƒë·∫ßu v√†o

        # Truy v·∫•n Supabase
        response = (
            supabase.table("products")
            .select("*")
            .ilike("product_name", f"%{searchtxt}%")  # T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            .execute()
        )

        # Debug ph·∫£n h·ªìi t·ª´ Supabase
        print(f"‚úÖ Raw response: {response}")  

        # Supabase tr·∫£ v·ªÅ m·ªôt object APIResponse, c·∫ßn l·∫•y `.data`
        data = response.data  # Thay v√¨ d√πng `.get("data")`

        if not data:
            print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu")
            return jsonify([])

        print(f"‚úÖ D·ªØ li·ªáu t√¨m th·∫•y: {data}")
        return jsonify(data)

    except Exception as e:
        print(f"üî• L·ªói h·ªá th·ªëng: {e}")  # Debug l·ªói v√†o terminal
        return jsonify({"error": "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau."}), 500